CREATE TABLE brands (
brand_id INT,
brand_name VARCHAR(255)

);

CREATE TABLE category (
category_id	INT,
category_name VARCHAR(255)

);

CREATE TABLE customers (
customer_id	INT PRIMARY KEY,
first_name	VARCHAR(255),
last_name	VARCHAR(255),
phone VARCHAR(255),	
email VARCHAR(255),	
street VARCHAR(255),	
city VARCHAR(255),	
state VARCHAR(255),	
zip_code VARCHAR(255)

);

CREATE TABLE order_items (
order_id	INT,
item_id INT,
product_id	INT,
quantity INT,	
list_price DECIMAL(10,2),	
discount  DECIMAL(10,2)

);

CREATE TABLE orders (
order_id	INT, 
customer_id	 INT,
order_status INT,	
order_date	DATE,
required_date DATE,	
shipped_date	DATE,
store_id	INT,
staff_id    INT

);

CREATE TABLE products (
product_id	INT,
product_name VARCHAR(255),	
brand_id	INT,
category_id	INT,
model_year	INT,
list_price  DECIMAL(10,2)
);

CREATE TABLE staffs (
staff_id	INT,
first_name	VARCHAR(255),
last_name VARCHAR(255),	
email	VARCHAR(255),
phone VARCHAR(255),	
active	INT,
store_id INT,	
manager_id INT
);

CREATE TABLE stocks (
store_id	INT,
product_id	INT,
quantity INT

);

CREATE TABLE stores (
    store_id   SERIAL PRIMARY KEY,  -- Auto-increment ID
    store_name VARCHAR(255) NOT NULL,
    phone      VARCHAR(50),
    email      VARCHAR(255),
    street     VARCHAR(255),
    city       VARCHAR(100),
    state      VARCHAR(50),
    zip_code   VARCHAR(20)
);


SELECT customer_id, COUNT(*) AS total_orders
FROM orders
GROUP BY customer_id;

#total revenue generated from all orders

SELECT SUM(list_price * quantity * (1 - discount)) AS total_revenue FROM order_items;

# Get the Total Number of products in each category

SELECT category_id, COUNT(*) AS total_products
FROM products
GROUP BY category_id;

#Find stores that have more than 100 products in stock.

SELECT store_id, SUM(quantity) AS total_stock
FROM stocks
GROUP BY store_id
HAVING SUM(quantity) > 100;

#Get all orders along with customer details

SELECT o.order_id,o.order_date, c.first_name, c.last_name,c.email
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id;

#Find the total quantity of each product sold

SELECT p.product_name, SUM(oi.quantity) AS total_quantuty_sold
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_name;

#List all employees along with their managers

SELECT s1.first_name AS staff_name, s2.first_name AS manager_name
FROM staffs s1
LEFT JOIN staffs s2 ON s1.manager_id = s2.staff_id;

#Find all products with their brand names

SELECT p.product_name, b.brand_name 
from products p
JOIN brands b ON p.brand_id = b.brand_id;

#Get all products with their category names

SELECT p.product_name, c.category_name
FROM products p 
JOIN category c ON p.category_id = c.category_id;

#Find all orders with store names

SELECT o.order_id, o.order_date, s.store_name
FROM orders o
JOIN stores s ON o.store_id = s.store_id;

#Find Customers who have placed more than 3 orders

SELECT customer_id FROM orders
GROUP BY customer_id
HAVING COUNT(order_id) > 3;

#Find hte most expensive product in each category

SELECT p.product_name, p.list_price, c.category_name
FROM products p
JOIN category c ON p.category_id = c.category_id
WHERE p.list_price = (
SELECT MAX(list_price) FROM products WHERE category_id = p.category_id
);

#Get the top 3 best selling products using CTE

WITH product_sales AS (
SELECT product_id, SUM(quantity) AS total_sold
FROM order_items
GROUP BY product_id
)
SELECT p.product_name, ps.total_sold
FROM product_sales ps
JOIN products p on ps.product_id = p.product_id
ORDER BY ps.total_sold DESC
LIMIT 3;

#Find the Revenue generated by each store

SELECT s.store_name, SUM(oi.quantity * oi.list_price * (1-oi.discount)) AS revenue
FROM stores s
JOIN orders o ON s.store_id = o.store_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY s.store_name;

#Find the most active customers(top 5 customers who placed the most orders)

SELECT c.first_name, c.last_name, COUNT(o.order_id) AS total_orders
From customers c
JOIN orders O ON c.customer_id = o.customer_id
GROUP BY c.customer_id
ORDER BY total_orders DESC
LIMIT 5;

#Find Products that were never sold

SELECT p.product_name FROM products p
LEFT JOIN order_items oi ON p.product_id = oi.product_id
WHERE oi.product_id IS NULL;



